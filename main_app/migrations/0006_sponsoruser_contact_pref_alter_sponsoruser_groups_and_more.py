# Generated by Django 5.1.7 on 2025-03-18 21:12

import django.contrib.auth.models
import django.contrib.auth.validators
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('main_app', '0005_merge_20250317_1926'),
    ]

    operations = [
        migrations.AddField(
            model_name='sponsoruser',
            name='contact_pref',
            field=models.JSONField(default=list),
        ),
        migrations.AlterField(
            model_name='sponsoruser',
            name='groups',
            field=models.ManyToManyField(blank=True, related_name='sponsoruser_set', to='auth.group'),
        ),
        migrations.AlterField(
            model_name='sponsoruser',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, related_name='sponsoruser_set', to='auth.permission'),
        ),
        migrations.CreateModel(
            name='StaffUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('pronouns', models.CharField(max_length=100)),
                ('first_name', models.CharField(max_length=100)),
                ('last_name', models.CharField(max_length=100)),
                ('user_tel', models.CharField(max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('groups', models.ManyToManyField(blank=True, related_name='staffuser_set', to='auth.group')),
                ('user_permissions', models.ManyToManyField(blank=True, related_name='staffuser_set', to='auth.permission')),
            ],
            options={
                'permissions': [('can_view_all_elements', 'Can view all elements'), ('can_edit_all_elements', 'Can edit all elements')],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
